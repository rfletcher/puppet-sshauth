# = sshauth::server
#
# Install public keys onto ssh servers
#
# === Provides:
#
# - Collect ssh_authorized_keys resources generated by sshauth::key
#
# === Parameters:
#
# All paramters are optional. Use these to override values set in sshauth::key.
#
# $ensure:   'present' (default) or 'absent'. Create or remove
#            ssh_authorized_keys resources on server
# $user:     user account on server in which to install the ssh_authorized_keys
#            resources
# $options:  options for public key when installed on server (authorized_keys).
#
# === Usage:
#
# # install unixsys pubkey into agould's authorized_keys file
# sshauth::server {"unixsys": user => 'agould', }
#
# # install into agould's account, only allow client with ip 192.168.0.5.
# sshauth::server {"unixsys": user => 'agould', options => 'from "192.168.0.5"', }
#
# # remove unixsys pubkey from agould's authorized_keys file
# sshauth::server {"unixsys": ensure => 'absent',user => 'agould', }
#
define sshauth::server (
  $ensure  = '',
  $user    = '',
  $options = '',
) {
  $_tag = regsubst( $name, '@', '_at_' )

  # Override the defaults set in sshauth::key, as needed.
  #
  # This is ugly, but we need to accomodate every permutation of the 
  # three params. Otherwise override bahavior is unpredictible.

  if ( $user and $ensure and $options ) {
    # notify { "sshauth::server: user and ensure and options": }
    Sshauth::Key::Server <<| tag == $_tag |>> {
      ensure  => $ensure,
      options => $options,
      user    => $user,
    }

  } elsif ( $user and $ensure ) {
    # notify { "sshauth::server: user and ensure": }
    Sshauth::Key::Server <<| tag == $_tag |>> {
      ensure => $ensure,
      user   => $user,
    }

  } elsif ( $user and $options ) {
    # notify { "sshauth::server: user and options": }
    Sshauth::Key::Server <<| tag == $_tag |>> {
      options => $options,
      user    => $user,
    }

  } elsif ( $options and $ensure ) {
    # notify { "sshauth::server: options and ensure": }
    Sshauth::Key::Server <<| tag == $_tag |>> {
      ensure  => $ensure,
      options => $options,
    }

  } elsif $user {
    # notify { "sshauth::server: user only": }
    Sshauth::Key::Server <<| tag == $_tag |>> {
      user => $user,
    }

  } elsif $ensure {
    # notify { "sshauth::server: ensure only": }
    Sshauth::Key::Server <<| tag == $_tag |>> {
      ensure => $ensure,
    }

  } elsif $options {
    # notify { "sshauth::server: options only": }
    Sshauth::Key::Server <<| tag == $_tag |>> {
      options => $options,
    }

  } else {
    # notify { "sshauth::server: default": }
    Sshauth::Key::Server <<| tag == $_tag |>>
  }
}
